{"version":3,"file":"background.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AErBA;AACA;AACA;AACA;AACA","sources":["webpack://TwitterTAG/./src/background/background.ts","webpack://TwitterTAG/webpack/before-startup","webpack://TwitterTAG/webpack/startup","webpack://TwitterTAG/webpack/after-startup"],"sourcesContent":["// Only fire the event when the URL has changed\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Background worker\nchrome.tabs.onUpdated.addListener((id, change, tab) => __awaiter(this, void 0, void 0, function* () {\n    // inject js file called 'inject.js'\n    const [activeTab] = yield chrome.tabs.query({\n        active: true,\n        currentWindow: true\n    });\n    yield chrome.tabs.sendMessage(activeTab.id, {\n        type: 'event_url_changed',\n        data: [change, tab]\n    });\n}));\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/background/background.ts\"]();\n",""],"names":[],"sourceRoot":""}